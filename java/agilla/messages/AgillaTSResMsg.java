/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AgillaTSResMsg'
 * message type.
 */

package agilla.messages;

public class AgillaTSResMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 26;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 49;

    /** Create a new AgillaTSResMsg of size 26. */
    public AgillaTSResMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AgillaTSResMsg of the given data_length. */
    public AgillaTSResMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaTSResMsg with the given data_length
     * and base offset.
     */
    public AgillaTSResMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaTSResMsg using the given byte array
     * as backing store.
     */
    public AgillaTSResMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaTSResMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public AgillaTSResMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaTSResMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AgillaTSResMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaTSResMsg embedded in the given message
     * at the given base offset.
     */
    public AgillaTSResMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaTSResMsg embedded in the given message
     * at the given base offset and length.
     */
    public AgillaTSResMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AgillaTSResMsg> \n";
      try {
        s += "  [dest=0x"+Long.toHexString(get_dest())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [op=0x"+Long.toHexString(get_op())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [success=0x"+Long.toHexString(get_success())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tuple.flags=0x"+Long.toHexString(get_tuple_flags())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tuple.size=0x"+Long.toHexString(get_tuple_size())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tuple.data=";
        for (int i = 0; i < 20; i++) {
          s += "0x"+Long.toHexString(getElement_tuple_data(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dest
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dest' is signed (false).
     */
    public static boolean isSigned_dest() {
        return false;
    }

    /**
     * Return whether the field 'dest' is an array (false).
     */
    public static boolean isArray_dest() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dest'
     */
    public static int offset_dest() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dest'
     */
    public static int offsetBits_dest() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'dest'
     */
    public int get_dest() {
        return (int)getUIntBEElement(offsetBits_dest(), 16);
    }

    /**
     * Set the value of the field 'dest'
     */
    public void set_dest(int value) {
        setUIntBEElement(offsetBits_dest(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'dest'
     */
    public static int size_dest() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dest'
     */
    public static int sizeBits_dest() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: op
    //   Field type: short
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'op' is signed (false).
     */
    public static boolean isSigned_op() {
        return false;
    }

    /**
     * Return whether the field 'op' is an array (false).
     */
    public static boolean isArray_op() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'op'
     */
    public static int offset_op() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'op'
     */
    public static int offsetBits_op() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'op'
     */
    public short get_op() {
        return (short)getUIntBEElement(offsetBits_op(), 8);
    }

    /**
     * Set the value of the field 'op'
     */
    public void set_op(short value) {
        setUIntBEElement(offsetBits_op(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'op'
     */
    public static int size_op() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'op'
     */
    public static int sizeBits_op() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: success
    //   Field type: short
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'success' is signed (false).
     */
    public static boolean isSigned_success() {
        return false;
    }

    /**
     * Return whether the field 'success' is an array (false).
     */
    public static boolean isArray_success() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'success'
     */
    public static int offset_success() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'success'
     */
    public static int offsetBits_success() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'success'
     */
    public short get_success() {
        return (short)getUIntBEElement(offsetBits_success(), 8);
    }

    /**
     * Set the value of the field 'success'
     */
    public void set_success(short value) {
        setUIntBEElement(offsetBits_success(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'success'
     */
    public static int size_success() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'success'
     */
    public static int sizeBits_success() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tuple.flags
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tuple.flags' is signed (false).
     */
    public static boolean isSigned_tuple_flags() {
        return false;
    }

    /**
     * Return whether the field 'tuple.flags' is an array (false).
     */
    public static boolean isArray_tuple_flags() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tuple.flags'
     */
    public static int offset_tuple_flags() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tuple.flags'
     */
    public static int offsetBits_tuple_flags() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'tuple.flags'
     */
    public short get_tuple_flags() {
        return (short)getUIntBEElement(offsetBits_tuple_flags(), 8);
    }

    /**
     * Set the value of the field 'tuple.flags'
     */
    public void set_tuple_flags(short value) {
        setUIntBEElement(offsetBits_tuple_flags(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'tuple.flags'
     */
    public static int size_tuple_flags() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tuple.flags'
     */
    public static int sizeBits_tuple_flags() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tuple.size
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tuple.size' is signed (false).
     */
    public static boolean isSigned_tuple_size() {
        return false;
    }

    /**
     * Return whether the field 'tuple.size' is an array (false).
     */
    public static boolean isArray_tuple_size() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tuple.size'
     */
    public static int offset_tuple_size() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tuple.size'
     */
    public static int offsetBits_tuple_size() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'tuple.size'
     */
    public short get_tuple_size() {
        return (short)getUIntBEElement(offsetBits_tuple_size(), 8);
    }

    /**
     * Set the value of the field 'tuple.size'
     */
    public void set_tuple_size(short value) {
        setUIntBEElement(offsetBits_tuple_size(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'tuple.size'
     */
    public static int size_tuple_size() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tuple.size'
     */
    public static int sizeBits_tuple_size() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tuple.data
    //   Field type: short[]
    //   Offset (bits): 48
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tuple.data' is signed (false).
     */
    public static boolean isSigned_tuple_data() {
        return false;
    }

    /**
     * Return whether the field 'tuple.data' is an array (true).
     */
    public static boolean isArray_tuple_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'tuple.data'
     */
    public static int offset_tuple_data(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 20) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tuple.data'
     */
    public static int offsetBits_tuple_data(int index1) {
        int offset = 48;
        if (index1 < 0 || index1 >= 20) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'tuple.data' as a short[]
     */
    public short[] get_tuple_data() {
        short[] tmp = new short[20];
        for (int index0 = 0; index0 < numElements_tuple_data(0); index0++) {
            tmp[index0] = getElement_tuple_data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'tuple.data' from the given short[]
     */
    public void set_tuple_data(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_tuple_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'tuple.data'
     */
    public short getElement_tuple_data(int index1) {
        return (short)getUIntBEElement(offsetBits_tuple_data(index1), 8);
    }

    /**
     * Set an element of the array 'tuple.data'
     */
    public void setElement_tuple_data(int index1, short value) {
        setUIntBEElement(offsetBits_tuple_data(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'tuple.data'
     */
    public static int totalSize_tuple_data() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'tuple.data'
     */
    public static int totalSizeBits_tuple_data() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'tuple.data'
     */
    public static int elementSize_tuple_data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'tuple.data'
     */
    public static int elementSizeBits_tuple_data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'tuple.data'
     */
    public static int numDimensions_tuple_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'tuple.data'
     */
    public static int numElements_tuple_data() {
        return 20;
    }

    /**
     * Return the number of elements in the array 'tuple.data'
     * for the given dimension.
     */
    public static int numElements_tuple_data(int dimension) {
      int array_dims[] = { 20,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'tuple.data' with a String
     */
    public void setString_tuple_data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_tuple_data(i, (short)s.charAt(i));
         }
         setElement_tuple_data(i, (short)0); //null terminate
    }

    /**
     * Read the array 'tuple.data' as a String
     */
    public String getString_tuple_data() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,20)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_tuple_data(i) == (char)0) break;
             carr[i] = (char)getElement_tuple_data(i);
         }
         return new String(carr,0,i);
    }

}
