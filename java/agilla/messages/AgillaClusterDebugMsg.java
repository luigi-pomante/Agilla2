/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AgillaClusterDebugMsg'
 * message type.
 */

package agilla.messages;

public class AgillaClusterDebugMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 12;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 75;

    /** Create a new AgillaClusterDebugMsg of size 12. */
    public AgillaClusterDebugMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AgillaClusterDebugMsg of the given data_length. */
    public AgillaClusterDebugMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaClusterDebugMsg with the given data_length
     * and base offset.
     */
    public AgillaClusterDebugMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaClusterDebugMsg using the given byte array
     * as backing store.
     */
    public AgillaClusterDebugMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaClusterDebugMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public AgillaClusterDebugMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaClusterDebugMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AgillaClusterDebugMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaClusterDebugMsg embedded in the given message
     * at the given base offset.
     */
    public AgillaClusterDebugMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaClusterDebugMsg embedded in the given message
     * at the given base offset and length.
     */
    public AgillaClusterDebugMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AgillaClusterDebugMsg> \n";
      try {
        s += "  [src=0x"+Long.toHexString(get_src())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [bounding_box.llc.x=0x"+Long.toHexString(get_bounding_box_llc_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [bounding_box.llc.y=0x"+Long.toHexString(get_bounding_box_llc_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [bounding_box.urc.x=0x"+Long.toHexString(get_bounding_box_urc_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [bounding_box.urc.y=0x"+Long.toHexString(get_bounding_box_urc_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: src
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'src' is signed (false).
     */
    public static boolean isSigned_src() {
        return false;
    }

    /**
     * Return whether the field 'src' is an array (false).
     */
    public static boolean isArray_src() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'src'
     */
    public static int offset_src() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'src'
     */
    public static int offsetBits_src() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'src'
     */
    public int get_src() {
        return (int)getUIntElement(offsetBits_src(), 16);
    }

    /**
     * Set the value of the field 'src'
     */
    public void set_src(int value) {
        setUIntElement(offsetBits_src(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'src'
     */
    public static int size_src() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'src'
     */
    public static int sizeBits_src() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: bounding_box.llc.x
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'bounding_box.llc.x' is signed (false).
     */
    public static boolean isSigned_bounding_box_llc_x() {
        return false;
    }

    /**
     * Return whether the field 'bounding_box.llc.x' is an array (false).
     */
    public static boolean isArray_bounding_box_llc_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'bounding_box.llc.x'
     */
    public static int offset_bounding_box_llc_x() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'bounding_box.llc.x'
     */
    public static int offsetBits_bounding_box_llc_x() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'bounding_box.llc.x'
     */
    public int get_bounding_box_llc_x() {
        return (int)getUIntBEElement(offsetBits_bounding_box_llc_x(), 16);
    }

    /**
     * Set the value of the field 'bounding_box.llc.x'
     */
    public void set_bounding_box_llc_x(int value) {
        setUIntBEElement(offsetBits_bounding_box_llc_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'bounding_box.llc.x'
     */
    public static int size_bounding_box_llc_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'bounding_box.llc.x'
     */
    public static int sizeBits_bounding_box_llc_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: bounding_box.llc.y
    //   Field type: int
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'bounding_box.llc.y' is signed (false).
     */
    public static boolean isSigned_bounding_box_llc_y() {
        return false;
    }

    /**
     * Return whether the field 'bounding_box.llc.y' is an array (false).
     */
    public static boolean isArray_bounding_box_llc_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'bounding_box.llc.y'
     */
    public static int offset_bounding_box_llc_y() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'bounding_box.llc.y'
     */
    public static int offsetBits_bounding_box_llc_y() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'bounding_box.llc.y'
     */
    public int get_bounding_box_llc_y() {
        return (int)getUIntBEElement(offsetBits_bounding_box_llc_y(), 16);
    }

    /**
     * Set the value of the field 'bounding_box.llc.y'
     */
    public void set_bounding_box_llc_y(int value) {
        setUIntBEElement(offsetBits_bounding_box_llc_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'bounding_box.llc.y'
     */
    public static int size_bounding_box_llc_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'bounding_box.llc.y'
     */
    public static int sizeBits_bounding_box_llc_y() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: bounding_box.urc.x
    //   Field type: int
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'bounding_box.urc.x' is signed (false).
     */
    public static boolean isSigned_bounding_box_urc_x() {
        return false;
    }

    /**
     * Return whether the field 'bounding_box.urc.x' is an array (false).
     */
    public static boolean isArray_bounding_box_urc_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'bounding_box.urc.x'
     */
    public static int offset_bounding_box_urc_x() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'bounding_box.urc.x'
     */
    public static int offsetBits_bounding_box_urc_x() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'bounding_box.urc.x'
     */
    public int get_bounding_box_urc_x() {
        return (int)getUIntBEElement(offsetBits_bounding_box_urc_x(), 16);
    }

    /**
     * Set the value of the field 'bounding_box.urc.x'
     */
    public void set_bounding_box_urc_x(int value) {
        setUIntBEElement(offsetBits_bounding_box_urc_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'bounding_box.urc.x'
     */
    public static int size_bounding_box_urc_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'bounding_box.urc.x'
     */
    public static int sizeBits_bounding_box_urc_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: bounding_box.urc.y
    //   Field type: int
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'bounding_box.urc.y' is signed (false).
     */
    public static boolean isSigned_bounding_box_urc_y() {
        return false;
    }

    /**
     * Return whether the field 'bounding_box.urc.y' is an array (false).
     */
    public static boolean isArray_bounding_box_urc_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'bounding_box.urc.y'
     */
    public static int offset_bounding_box_urc_y() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'bounding_box.urc.y'
     */
    public static int offsetBits_bounding_box_urc_y() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'bounding_box.urc.y'
     */
    public int get_bounding_box_urc_y() {
        return (int)getUIntBEElement(offsetBits_bounding_box_urc_y(), 16);
    }

    /**
     * Set the value of the field 'bounding_box.urc.y'
     */
    public void set_bounding_box_urc_y(int value) {
        setUIntBEElement(offsetBits_bounding_box_urc_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'bounding_box.urc.y'
     */
    public static int size_bounding_box_urc_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'bounding_box.urc.y'
     */
    public static int sizeBits_bounding_box_urc_y() {
        return 16;
    }

}
