/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AgillaErrorMsg'
 * message type.
 */

package agilla.messages;

public class AgillaErrorMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 14;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 32;

    /** Create a new AgillaErrorMsg of size 14. */
    public AgillaErrorMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AgillaErrorMsg of the given data_length. */
    public AgillaErrorMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaErrorMsg with the given data_length
     * and base offset.
     */
    public AgillaErrorMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaErrorMsg using the given byte array
     * as backing store.
     */
    public AgillaErrorMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaErrorMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public AgillaErrorMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaErrorMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AgillaErrorMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaErrorMsg embedded in the given message
     * at the given base offset.
     */
    public AgillaErrorMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaErrorMsg embedded in the given message
     * at the given base offset and length.
     */
    public AgillaErrorMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AgillaErrorMsg> \n";
      try {
        s += "  [id.id=0x"+Long.toHexString(get_id_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [src=0x"+Long.toHexString(get_src())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [cause=0x"+Long.toHexString(get_cause())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [pc=0x"+Long.toHexString(get_pc())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [instr=0x"+Long.toHexString(get_instr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sp=0x"+Long.toHexString(get_sp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dummy=0x"+Long.toHexString(get_dummy())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reason1=0x"+Long.toHexString(get_reason1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [reason2=0x"+Long.toHexString(get_reason2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id.id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id.id' is signed (false).
     */
    public static boolean isSigned_id_id() {
        return false;
    }

    /**
     * Return whether the field 'id.id' is an array (false).
     */
    public static boolean isArray_id_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id.id'
     */
    public static int offset_id_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id.id'
     */
    public static int offsetBits_id_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'id.id'
     */
    public int get_id_id() {
        return (int)getUIntBEElement(offsetBits_id_id(), 16);
    }

    /**
     * Set the value of the field 'id.id'
     */
    public void set_id_id(int value) {
        setUIntBEElement(offsetBits_id_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id.id'
     */
    public static int size_id_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id.id'
     */
    public static int sizeBits_id_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: src
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'src' is signed (false).
     */
    public static boolean isSigned_src() {
        return false;
    }

    /**
     * Return whether the field 'src' is an array (false).
     */
    public static boolean isArray_src() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'src'
     */
    public static int offset_src() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'src'
     */
    public static int offsetBits_src() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'src'
     */
    public int get_src() {
        return (int)getUIntBEElement(offsetBits_src(), 16);
    }

    /**
     * Set the value of the field 'src'
     */
    public void set_src(int value) {
        setUIntBEElement(offsetBits_src(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'src'
     */
    public static int size_src() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'src'
     */
    public static int sizeBits_src() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: cause
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'cause' is signed (false).
     */
    public static boolean isSigned_cause() {
        return false;
    }

    /**
     * Return whether the field 'cause' is an array (false).
     */
    public static boolean isArray_cause() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'cause'
     */
    public static int offset_cause() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'cause'
     */
    public static int offsetBits_cause() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'cause'
     */
    public short get_cause() {
        return (short)getUIntBEElement(offsetBits_cause(), 8);
    }

    /**
     * Set the value of the field 'cause'
     */
    public void set_cause(short value) {
        setUIntBEElement(offsetBits_cause(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'cause'
     */
    public static int size_cause() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'cause'
     */
    public static int sizeBits_cause() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: pc
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'pc' is signed (false).
     */
    public static boolean isSigned_pc() {
        return false;
    }

    /**
     * Return whether the field 'pc' is an array (false).
     */
    public static boolean isArray_pc() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'pc'
     */
    public static int offset_pc() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'pc'
     */
    public static int offsetBits_pc() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'pc'
     */
    public int get_pc() {
        return (int)getUIntBEElement(offsetBits_pc(), 16);
    }

    /**
     * Set the value of the field 'pc'
     */
    public void set_pc(int value) {
        setUIntBEElement(offsetBits_pc(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'pc'
     */
    public static int size_pc() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'pc'
     */
    public static int sizeBits_pc() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: instr
    //   Field type: short, unsigned
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'instr' is signed (false).
     */
    public static boolean isSigned_instr() {
        return false;
    }

    /**
     * Return whether the field 'instr' is an array (false).
     */
    public static boolean isArray_instr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'instr'
     */
    public static int offset_instr() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'instr'
     */
    public static int offsetBits_instr() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'instr'
     */
    public short get_instr() {
        return (short)getUIntBEElement(offsetBits_instr(), 8);
    }

    /**
     * Set the value of the field 'instr'
     */
    public void set_instr(short value) {
        setUIntBEElement(offsetBits_instr(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'instr'
     */
    public static int size_instr() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'instr'
     */
    public static int sizeBits_instr() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sp
    //   Field type: short, unsigned
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sp' is signed (false).
     */
    public static boolean isSigned_sp() {
        return false;
    }

    /**
     * Return whether the field 'sp' is an array (false).
     */
    public static boolean isArray_sp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sp'
     */
    public static int offset_sp() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sp'
     */
    public static int offsetBits_sp() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'sp'
     */
    public short get_sp() {
        return (short)getUIntBEElement(offsetBits_sp(), 8);
    }

    /**
     * Set the value of the field 'sp'
     */
    public void set_sp(short value) {
        setUIntBEElement(offsetBits_sp(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'sp'
     */
    public static int size_sp() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sp'
     */
    public static int sizeBits_sp() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dummy
    //   Field type: short, unsigned
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dummy' is signed (false).
     */
    public static boolean isSigned_dummy() {
        return false;
    }

    /**
     * Return whether the field 'dummy' is an array (false).
     */
    public static boolean isArray_dummy() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dummy'
     */
    public static int offset_dummy() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dummy'
     */
    public static int offsetBits_dummy() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'dummy'
     */
    public short get_dummy() {
        return (short)getUIntBEElement(offsetBits_dummy(), 8);
    }

    /**
     * Set the value of the field 'dummy'
     */
    public void set_dummy(short value) {
        setUIntBEElement(offsetBits_dummy(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'dummy'
     */
    public static int size_dummy() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dummy'
     */
    public static int sizeBits_dummy() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reason1
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reason1' is signed (false).
     */
    public static boolean isSigned_reason1() {
        return false;
    }

    /**
     * Return whether the field 'reason1' is an array (false).
     */
    public static boolean isArray_reason1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reason1'
     */
    public static int offset_reason1() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reason1'
     */
    public static int offsetBits_reason1() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'reason1'
     */
    public int get_reason1() {
        return (int)getUIntBEElement(offsetBits_reason1(), 16);
    }

    /**
     * Set the value of the field 'reason1'
     */
    public void set_reason1(int value) {
        setUIntBEElement(offsetBits_reason1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reason1'
     */
    public static int size_reason1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reason1'
     */
    public static int sizeBits_reason1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: reason2
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'reason2' is signed (false).
     */
    public static boolean isSigned_reason2() {
        return false;
    }

    /**
     * Return whether the field 'reason2' is an array (false).
     */
    public static boolean isArray_reason2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'reason2'
     */
    public static int offset_reason2() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'reason2'
     */
    public static int offsetBits_reason2() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'reason2'
     */
    public int get_reason2() {
        return (int)getUIntBEElement(offsetBits_reason2(), 16);
    }

    /**
     * Set the value of the field 'reason2'
     */
    public void set_reason2(int value) {
        setUIntBEElement(offsetBits_reason2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'reason2'
     */
    public static int size_reason2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'reason2'
     */
    public static int sizeBits_reason2() {
        return 16;
    }

}
