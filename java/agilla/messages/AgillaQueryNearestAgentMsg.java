/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AgillaQueryNearestAgentMsg'
 * message type.
 */

package agilla.messages;

public class AgillaQueryNearestAgentMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 16;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 69;

    /** Create a new AgillaQueryNearestAgentMsg of size 16. */
    public AgillaQueryNearestAgentMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AgillaQueryNearestAgentMsg of the given data_length. */
    public AgillaQueryNearestAgentMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaQueryNearestAgentMsg with the given data_length
     * and base offset.
     */
    public AgillaQueryNearestAgentMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaQueryNearestAgentMsg using the given byte array
     * as backing store.
     */
    public AgillaQueryNearestAgentMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaQueryNearestAgentMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public AgillaQueryNearestAgentMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaQueryNearestAgentMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AgillaQueryNearestAgentMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaQueryNearestAgentMsg embedded in the given message
     * at the given base offset.
     */
    public AgillaQueryNearestAgentMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaQueryNearestAgentMsg embedded in the given message
     * at the given base offset and length.
     */
    public AgillaQueryNearestAgentMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AgillaQueryNearestAgentMsg> \n";
      try {
        s += "  [agent_id.id=0x"+Long.toHexString(get_agent_id_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [src=0x"+Long.toHexString(get_src())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dest=0x"+Long.toHexString(get_dest())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [qid=0x"+Long.toHexString(get_qid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [flags=0x"+Long.toHexString(get_flags())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [loc.x=0x"+Long.toHexString(get_loc_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [loc.y=0x"+Long.toHexString(get_loc_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [agent_type=0x"+Long.toHexString(get_agent_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: agent_id.id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'agent_id.id' is signed (false).
     */
    public static boolean isSigned_agent_id_id() {
        return false;
    }

    /**
     * Return whether the field 'agent_id.id' is an array (false).
     */
    public static boolean isArray_agent_id_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'agent_id.id'
     */
    public static int offset_agent_id_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'agent_id.id'
     */
    public static int offsetBits_agent_id_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'agent_id.id'
     */
    public int get_agent_id_id() {
        return (int)getUIntBEElement(offsetBits_agent_id_id(), 16);
    }

    /**
     * Set the value of the field 'agent_id.id'
     */
    public void set_agent_id_id(int value) {
        setUIntBEElement(offsetBits_agent_id_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'agent_id.id'
     */
    public static int size_agent_id_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'agent_id.id'
     */
    public static int sizeBits_agent_id_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: src
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'src' is signed (false).
     */
    public static boolean isSigned_src() {
        return false;
    }

    /**
     * Return whether the field 'src' is an array (false).
     */
    public static boolean isArray_src() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'src'
     */
    public static int offset_src() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'src'
     */
    public static int offsetBits_src() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'src'
     */
    public int get_src() {
        return (int)getUIntBEElement(offsetBits_src(), 16);
    }

    /**
     * Set the value of the field 'src'
     */
    public void set_src(int value) {
        setUIntBEElement(offsetBits_src(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'src'
     */
    public static int size_src() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'src'
     */
    public static int sizeBits_src() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dest
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dest' is signed (false).
     */
    public static boolean isSigned_dest() {
        return false;
    }

    /**
     * Return whether the field 'dest' is an array (false).
     */
    public static boolean isArray_dest() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dest'
     */
    public static int offset_dest() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dest'
     */
    public static int offsetBits_dest() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'dest'
     */
    public int get_dest() {
        return (int)getUIntBEElement(offsetBits_dest(), 16);
    }

    /**
     * Set the value of the field 'dest'
     */
    public void set_dest(int value) {
        setUIntBEElement(offsetBits_dest(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'dest'
     */
    public static int size_dest() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dest'
     */
    public static int sizeBits_dest() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: qid
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'qid' is signed (false).
     */
    public static boolean isSigned_qid() {
        return false;
    }

    /**
     * Return whether the field 'qid' is an array (false).
     */
    public static boolean isArray_qid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'qid'
     */
    public static int offset_qid() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'qid'
     */
    public static int offsetBits_qid() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'qid'
     */
    public int get_qid() {
        return (int)getUIntBEElement(offsetBits_qid(), 16);
    }

    /**
     * Set the value of the field 'qid'
     */
    public void set_qid(int value) {
        setUIntBEElement(offsetBits_qid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'qid'
     */
    public static int size_qid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'qid'
     */
    public static int sizeBits_qid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: flags
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'flags' is signed (false).
     */
    public static boolean isSigned_flags() {
        return false;
    }

    /**
     * Return whether the field 'flags' is an array (false).
     */
    public static boolean isArray_flags() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'flags'
     */
    public static int offset_flags() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'flags'
     */
    public static int offsetBits_flags() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'flags'
     */
    public int get_flags() {
        return (int)getUIntBEElement(offsetBits_flags(), 16);
    }

    /**
     * Set the value of the field 'flags'
     */
    public void set_flags(int value) {
        setUIntBEElement(offsetBits_flags(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'flags'
     */
    public static int size_flags() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'flags'
     */
    public static int sizeBits_flags() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: loc.x
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'loc.x' is signed (false).
     */
    public static boolean isSigned_loc_x() {
        return false;
    }

    /**
     * Return whether the field 'loc.x' is an array (false).
     */
    public static boolean isArray_loc_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'loc.x'
     */
    public static int offset_loc_x() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'loc.x'
     */
    public static int offsetBits_loc_x() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'loc.x'
     */
    public int get_loc_x() {
        return (int)getUIntBEElement(offsetBits_loc_x(), 16);
    }

    /**
     * Set the value of the field 'loc.x'
     */
    public void set_loc_x(int value) {
        setUIntBEElement(offsetBits_loc_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'loc.x'
     */
    public static int size_loc_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'loc.x'
     */
    public static int sizeBits_loc_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: loc.y
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'loc.y' is signed (false).
     */
    public static boolean isSigned_loc_y() {
        return false;
    }

    /**
     * Return whether the field 'loc.y' is an array (false).
     */
    public static boolean isArray_loc_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'loc.y'
     */
    public static int offset_loc_y() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'loc.y'
     */
    public static int offsetBits_loc_y() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'loc.y'
     */
    public int get_loc_y() {
        return (int)getUIntBEElement(offsetBits_loc_y(), 16);
    }

    /**
     * Set the value of the field 'loc.y'
     */
    public void set_loc_y(int value) {
        setUIntBEElement(offsetBits_loc_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'loc.y'
     */
    public static int size_loc_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'loc.y'
     */
    public static int sizeBits_loc_y() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: agent_type
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'agent_type' is signed (false).
     */
    public static boolean isSigned_agent_type() {
        return false;
    }

    /**
     * Return whether the field 'agent_type' is an array (false).
     */
    public static boolean isArray_agent_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'agent_type'
     */
    public static int offset_agent_type() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'agent_type'
     */
    public static int offsetBits_agent_type() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'agent_type'
     */
    public int get_agent_type() {
        return (int)getUIntBEElement(offsetBits_agent_type(), 16);
    }

    /**
     * Set the value of the field 'agent_type'
     */
    public void set_agent_type(int value) {
        setUIntBEElement(offsetBits_agent_type(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'agent_type'
     */
    public static int size_agent_type() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'agent_type'
     */
    public static int sizeBits_agent_type() {
        return 16;
    }

}
