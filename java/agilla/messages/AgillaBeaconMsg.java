/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AgillaBeaconMsg'
 * message type.
 */

package agilla.messages;

public class AgillaBeaconMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 8;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 34;

    /** Create a new AgillaBeaconMsg of size 8. */
    public AgillaBeaconMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AgillaBeaconMsg of the given data_length. */
    public AgillaBeaconMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaBeaconMsg with the given data_length
     * and base offset.
     */
    public AgillaBeaconMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaBeaconMsg using the given byte array
     * as backing store.
     */
    public AgillaBeaconMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaBeaconMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public AgillaBeaconMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaBeaconMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AgillaBeaconMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaBeaconMsg embedded in the given message
     * at the given base offset.
     */
    public AgillaBeaconMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaBeaconMsg embedded in the given message
     * at the given base offset and length.
     */
    public AgillaBeaconMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AgillaBeaconMsg> \n";
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hopsToGW=0x"+Long.toHexString(get_hopsToGW())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [chId=0x"+Long.toHexString(get_chId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [energy=0x"+Long.toHexString(get_energy())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntBEElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntBEElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hopsToGW
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hopsToGW' is signed (false).
     */
    public static boolean isSigned_hopsToGW() {
        return false;
    }

    /**
     * Return whether the field 'hopsToGW' is an array (false).
     */
    public static boolean isArray_hopsToGW() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hopsToGW'
     */
    public static int offset_hopsToGW() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hopsToGW'
     */
    public static int offsetBits_hopsToGW() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'hopsToGW'
     */
    public int get_hopsToGW() {
        return (int)getUIntBEElement(offsetBits_hopsToGW(), 16);
    }

    /**
     * Set the value of the field 'hopsToGW'
     */
    public void set_hopsToGW(int value) {
        setUIntBEElement(offsetBits_hopsToGW(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'hopsToGW'
     */
    public static int size_hopsToGW() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hopsToGW'
     */
    public static int sizeBits_hopsToGW() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: chId
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'chId' is signed (false).
     */
    public static boolean isSigned_chId() {
        return false;
    }

    /**
     * Return whether the field 'chId' is an array (false).
     */
    public static boolean isArray_chId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'chId'
     */
    public static int offset_chId() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'chId'
     */
    public static int offsetBits_chId() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'chId'
     */
    public short get_chId() {
        return (short)getSIntBEElement(offsetBits_chId(), 16);
    }

    /**
     * Set the value of the field 'chId'
     */
    public void set_chId(short value) {
        setSIntBEElement(offsetBits_chId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'chId'
     */
    public static int size_chId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'chId'
     */
    public static int sizeBits_chId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: energy
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'energy' is signed (false).
     */
    public static boolean isSigned_energy() {
        return false;
    }

    /**
     * Return whether the field 'energy' is an array (false).
     */
    public static boolean isArray_energy() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'energy'
     */
    public static int offset_energy() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'energy'
     */
    public static int offsetBits_energy() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'energy'
     */
    public int get_energy() {
        return (int)getUIntBEElement(offsetBits_energy(), 16);
    }

    /**
     * Set the value of the field 'energy'
     */
    public void set_energy(int value) {
        setUIntBEElement(offsetBits_energy(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'energy'
     */
    public static int size_energy() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'energy'
     */
    public static int sizeBits_energy() {
        return 16;
    }

}
