/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'AgillaExpResultsMsg'
 * message type.
 */

package agilla.messages;

public class AgillaExpResultsMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 6;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 146;

    /** Create a new AgillaExpResultsMsg of size 6. */
    public AgillaExpResultsMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new AgillaExpResultsMsg of the given data_length. */
    public AgillaExpResultsMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaExpResultsMsg with the given data_length
     * and base offset.
     */
    public AgillaExpResultsMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaExpResultsMsg using the given byte array
     * as backing store.
     */
    public AgillaExpResultsMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaExpResultsMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public AgillaExpResultsMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaExpResultsMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public AgillaExpResultsMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaExpResultsMsg embedded in the given message
     * at the given base offset.
     */
    public AgillaExpResultsMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new AgillaExpResultsMsg embedded in the given message
     * at the given base offset and length.
     */
    public AgillaExpResultsMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <AgillaExpResultsMsg> \n";
      try {
        s += "  [numQueries=0x"+Long.toHexString(get_numQueries())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [numUpdates=0x"+Long.toHexString(get_numUpdates())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [numReplies=0x"+Long.toHexString(get_numReplies())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: numQueries
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'numQueries' is signed (false).
     */
    public static boolean isSigned_numQueries() {
        return false;
    }

    /**
     * Return whether the field 'numQueries' is an array (false).
     */
    public static boolean isArray_numQueries() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'numQueries'
     */
    public static int offset_numQueries() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'numQueries'
     */
    public static int offsetBits_numQueries() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'numQueries'
     */
    public int get_numQueries() {
        return (int)getUIntElement(offsetBits_numQueries(), 16);
    }

    /**
     * Set the value of the field 'numQueries'
     */
    public void set_numQueries(int value) {
        setUIntElement(offsetBits_numQueries(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'numQueries'
     */
    public static int size_numQueries() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'numQueries'
     */
    public static int sizeBits_numQueries() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: numUpdates
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'numUpdates' is signed (false).
     */
    public static boolean isSigned_numUpdates() {
        return false;
    }

    /**
     * Return whether the field 'numUpdates' is an array (false).
     */
    public static boolean isArray_numUpdates() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'numUpdates'
     */
    public static int offset_numUpdates() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'numUpdates'
     */
    public static int offsetBits_numUpdates() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'numUpdates'
     */
    public int get_numUpdates() {
        return (int)getUIntElement(offsetBits_numUpdates(), 16);
    }

    /**
     * Set the value of the field 'numUpdates'
     */
    public void set_numUpdates(int value) {
        setUIntElement(offsetBits_numUpdates(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'numUpdates'
     */
    public static int size_numUpdates() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'numUpdates'
     */
    public static int sizeBits_numUpdates() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: numReplies
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'numReplies' is signed (false).
     */
    public static boolean isSigned_numReplies() {
        return false;
    }

    /**
     * Return whether the field 'numReplies' is an array (false).
     */
    public static boolean isArray_numReplies() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'numReplies'
     */
    public static int offset_numReplies() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'numReplies'
     */
    public static int offsetBits_numReplies() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'numReplies'
     */
    public int get_numReplies() {
        return (int)getUIntElement(offsetBits_numReplies(), 16);
    }

    /**
     * Set the value of the field 'numReplies'
     */
    public void set_numReplies(int value) {
        setUIntElement(offsetBits_numReplies(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'numReplies'
     */
    public static int size_numReplies() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'numReplies'
     */
    public static int sizeBits_numReplies() {
        return 16;
    }

}
